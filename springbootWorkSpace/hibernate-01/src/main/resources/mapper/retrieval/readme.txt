三。hibernate 检索
    1.立即检索策略
        采用立即检索策略，会将被检索的对象，以及和这个对象
        关联的一对多对象都加载到缓存中。Session的get方法就
        使用的立即检索策略
        优点：频繁使用的关联对象能够被加载到缓存中。
        缺点：1.占用内存  2.select语句过多

    2.延迟检索策略
        采用延迟检索策略，就不会加载关联对象的内容。知道第一次
        调用关联对象时，才去加载关联对象。在不涉及关联类操作时
        延迟检索策略只适用于Session的load方法。涉及关联类操作
        时，延迟检索策略也能够使用于get，list等操作。

        在类级别操作时（也就是只涉及一张表时），延迟检索策略，
        只加载类的OID不加载类的其他属性，只用当第一次访问其他属性
        时，才会访问数据库取加载内容

        在关联级别操作时（也就是有一对多，多对多...关联关系时，涉及
        多张表时），延迟检索策略，只加载类本身，不加载关联类，直到
        第一次调用关联对象时，才去加载关联对象 程序的默认模式都是用
        延迟加载策略。如果需要制定使用延迟加载策略。在配置文件中设置
        <class>的lazy=true,
        <set>的lazy=true 或 extra (增强延迟)
        <many-to-one> 的lazy=proxy 和 no-proxy  (代理就是延迟加载)

        优点：由程序决定加载那些类和内容，避免了大量无用的sql语句和
        内存消耗
        缺点：在session关闭后，就不能访问关联类对象了。强行访问就会
        发生懒加载异常，所以需要确保在Session.close方法前，调用关联
        对象。

    3.左外连接检索策略
        采用左外连接检索，能够使用Sql的外链接查询，将需要加载的关联
        加载在缓存中。
            <set>fetch设置为join,<many-to-one>的fetch设置为join

         fetch除join取值外，还有select和subselect的取值，它们决定了
         发起的sql语句的形式，分开独立的select查询，还是子查询，还是
         外连接查询。

         优点：1.对应用程序完全透明，不管对象处于持久化状态，还是游离
         状态，应用程序都可以方便的从一个对象导航到与它关联的对象。
         2.使用了外连接，select语句数目少。

         缺点：1.可能会加载应用程序不需要访问的对象，白白浪费许多内存
         空间。 2.复杂的数据库连接也会影响检索性能。

         batch-size 属性  （关联数量）
         无论是立即检索还是延迟检索，都可以指定关联查询的数量，这就需要
         使用batch-size 属性来指定，指定关联查询数量，以减少批量检索的
         数据数目。从而提高检索的性能。

         注：取值是join 时，不能喝batch-size 属性一起用，加载一这段对象
         时，它会用左外连接将关联对象一起加载进来！而且这时lazy属性没有
         作用了  2 hql查询 fetch=join 是没有作用  （join 关联一次性查询出来）